stages:
- build
- check
#- validate


# before_script:
#  - rm -rf /usr/local/bin/yoda*
#  - rm -rf /usr/local/include/YODA
#  - rm -rf /usr/local/lib/libYODA.*
#  - rm -rf /usr/local/lib*/python*/site-packages/yoda*


# TODO: add a hepbase-osx??
.build_template: &build_template
  image:
    hepstore/hepbase-$OS
  stage: build
  script:
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local"
    - mkdir -p $INSTALL_PREFIX/etc/bash_completion.d
    - autoreconf -i
    - ./configure --prefix=$INSTALL_PREFIX
    - make
    - make check
    - make install
    # - export PATH="$CI_PROJECT_DIR/local/bin:$PATH"
    # - export LD_LIBRARY_PATH="$CI_PROJECT_DIR/local/lib:$CI_PROJECT_DIR/local/lib64:$LD_LIBRARY_PATH"
    # - export PYTHONPATH="$(ls -d1 $CI_PROJECT_DIR/local/lib/python*/site-packages):$PYTHONPATH"
    # # TODO: cache set downloads
    # - lhapdf get CT10nlo MMHT2014nnlo68cl NNPDF31_lo_as_0118
    - cd examples
    - make
    # - ./analyticpdf
    # - ./compatibility
    # - ./testpdfset CT10nlo
    # - ./testpdfunc CT10nlo
    # - ./testpdf CT10nlo 0
    # - ./testpdfcache
    - gfortran fexample1.f90 -L$INSTALL_PREFIX/lib -lLHAPDF -o fexample1
    - gfortran fexample2.f90 -L$INSTALL_PREFIX/lib -lLHAPDF -o fexample2
    # - ./fexample1
    # - ./fexample2
  artifacts:
    when: always
    paths:
      - include/
      - src/
      - wrappers/
      - tests/
      - examples/
      - bin/
      - local/
    expire_in: 1 week


build-fedora-gcc-py3:
  variables:
    OS: fedora-gcc-hepmc3-py3
  <<: *build_template

build-ubuntu-gcc-py3:
  variables:
    OS: ubuntu-gcc-hepmc3-py3
  <<: *build_template

build-ubuntu-clang-py3:
  variables:
    OS: ubuntu-clang-hepmc3-py3
  <<: *build_template

build-ubuntu-gcc-py2:
  variables:
    OS: ubuntu-gcc-hepmc3-py2
  <<: *build_template

# build-debian-gcc-py2:
#   variables:
#     OS: debian-gcc-hepmc3-py2
#   <<: *build_template



.check_template: &check_template
  stage: check
  image:
      hepstore/hepbase-$OS
  script:
    - INSTALL_PREFIX="$CI_PROJECT_DIR/local"
    - export PATH=$INSTALL_PREFIX/bin:$PATH
    - export LD_LIBRARY_PATH=$INSTALL_PREFIX/lib:$LD_LIBRARY_PATH
    - export PYTHONNAME=`python -c 'from __future__ import print_function; from distutils.sysconfig import get_config_var; print("python%s" % str(get_config_var("VERSION")))'`
    - export PYTHONPATH=$INSTALL_PREFIX/lib/$PYTHONNAME/site-packages/:$INSTALL_PREFIX/lib64/$PYTHONNAME/site-packages/:$PYTHONPATH
    - export LHAPDF_DATA_PATH=$INSTALL_PREFIX/share/LHAPDF
    # TODO: cache set downloads
    - lhapdf -h
    #- lhapdf update
    - lhapdf get cteq6 CT10nlo MMHT2014nnlo68cl NNPDF31_nnlo_as_0118
    - cd examples
    # - make
    - ./analyticpdf
    - ./compatibility
    - ./testpdfset CT10nlo
    - ./testpdfunc CT10nlo
    - ./testpdf CT10nlo 0
    - ./testpdfcache > testpdfcache.dat
    - head testpdfcache.dat
    - tail testpdfcache.dat
    - python -c 'from __future__ import print_function; import lhapdf; p = lhapdf.mkPDF("CT10nlo/0"); print(p); print(p.xfxQ(21,1e-3,126.0))'
    # - gfortran fexample1.f90 -L$INSTALL_PREFIX/lib -lLHAPDF -o fexample1
    # - gfortran fexample2.f90 -L$INSTALL_PREFIX/lib -lLHAPDF -o fexample2
    - ./fexample1
    - ./fexample2
    # - lhapdf get CT10nlo
    # - cd examples
    # - ./testpdf CT10nlo 5
    # - ./testpdfset
    # - ./testpdfcache > testpdfcache.dat
    # - head testpdfcache.dat
    # - tail testpdfcache.dat
    # - python -c 'from __future__ import print_function; import lhapdf; p = lhapdf.mkPDF("CT10nlo/0"); print(p.xfxQ(21,1e-3,126.0))'
  artifacts:
    when: always
    paths:
      - local/
      - examples/
    expire_in: 1 week


check-fedora-gcc-py3:
  variables:
    OS: fedora-gcc-hepmc3-py3
  needs:
    - build-fedora-gcc-py3
  <<: *check_template

check-ubuntu-gcc-py3:
  variables:
    OS: ubuntu-gcc-hepmc3-py3
  needs:
    - build-ubuntu-gcc-py3
  <<: *check_template

check-ubuntu-clang-py3:
  variables:
    OS: ubuntu-clang-hepmc3-py3
  needs:
    - build-ubuntu-clang-py3
  <<: *check_template

check-ubuntu-gcc-py2:
  variables:
    OS: ubuntu-gcc-hepmc3-py2
  needs:
    - build-ubuntu-gcc-py2
  <<: *check_template

# check-debian-gcc-py2:
#   variables:
#     OS: debian-gcc-hepmc3-py2
#   needs:
#     - build-debian-gcc-py2
#   <<: *check_template
